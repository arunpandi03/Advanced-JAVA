package com.an.sb_db;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="ARUN_MENU")
public class arun {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long menu_id;
	private String menu_name;
	private int price;
	
	public long getMenu_id() {
		return menu_id;
	}
	public void setMenu_id(long menu_id) {
		this.menu_id = menu_id;
	}
	public String getMenu_name() {
		return menu_name;
	}
	public void setMenu_name(String menu_name) {
		this.menu_name = menu_name;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	
	@Override
	public String toString() {
		return "arun [menu_id=" + menu_id + ", menu_name=" + menu_name + ", price=" + price + "]";
	}

	
}





---------------------------------------------------------------------

package com.an.sb_db;

import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomerRepository extends JpaRepository<arun,Long>{

}


-------------------------------------------------------------------------

package com.an.sb_db;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

@SpringBootApplication
public class SbDbApplication implements CommandLineRunner{
	@Autowired
	private JdbcTemplate jdbcTemplate;
	public static void main(String[] args) {
		SpringApplication.run(SbDbApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		String sql ="select * from ARUN_MENU";
		List<arun> arun = jdbcTemplate.query(sql,BeanPropertyRowMapper.newInstance(arun.class));
		arun.forEach(System.out::println);
	}

}
     